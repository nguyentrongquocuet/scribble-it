interface FullDetailUser {
  id: ID!
  password: String!
  username: String!
  created_at: Float!
  avatar: String
}

enum Status {
  SUCCESS
  ERROR
}

interface QueryResult {
  status: Status!
  statusCode: Int!
}

type User @key(fields: "id") {
  id: ID!
  username: String!
  avatar: String
}

type AuthToken {
  token: String!
  expiredAt: Float!
  user: User!
}

type InputError {
  field: String
  error: String
}

type InvalidInput {
  errors: [InputError!]!
}

type LoginFailed {
  message: String
}

type AlreadyRegisted {
  message: String
}

union SignUpResult = AuthToken | AlreadyRegisted | InvalidInput

union LoginResult = AuthToken | LoginFailed

type SignUpQueryResult implements QueryResult {
  statusCode: Int!
  status: Status!
  node: SignUpResult!
}

type LoginQueryResult implements QueryResult {
  statusCode: Int!
  status: Status!
  node: LoginResult!
}

type Mutation {
  SignUp(
    username: String!
    password: String!
    repassword: String!
    avatar: String
  ): SignUpQueryResult
  Login(username: String!, password: String!): LoginQueryResult
}

type Query {
  NewToken: String
  DefaultAvatar: String!
}
